import { Frame } from './Frame';
import { Config, ExportFromApiResult, ExportHtmlOptions, ExportHtmlResult, ExportPlainTextResult, ExportImageFromApiOptions, ExportLiveHtmlOptions, ExportPdfFromApiOptions, ExportPlainTextOptions, ExportZipFromApiOptions, SaveDesignOptions, ExportLiveHtmlResult } from './Config';
import { AppearanceConfig, Audit, DesignTagsConfig, Device, DisplayConditions, DisplayMode, JSONTemplate, LinkTypes, LinkTypesSharedConfig, MergeTags, MergeTagsConfig, SpecialLink, Tabs, Translations, User, Validator } from './StateTypes';
import { BodyValues } from './BodyValues';
import { Locale, TextDirection } from './intl';
import { DeepPartial } from './EditorTypes';

export declare const LATEST_VERSION: string;
export declare const STABLE_VERSION: string;
export declare class Editor {
    frame: Frame | null;
    constructor(config?: Config);
    init(config?: Config): void;
    destroy(): void;
    version: string | undefined;
    loadEditor(config: Config): void;
    renderEditor(config: Config): void;
    initEditor(config: Config): void;
    registerColumns(cells: number[]): void;
    registerCallback(type: string, callback: Function): void;
    unregisterCallback(type: string): void;
    registerProvider(type: string, callback: Function): void;
    unregisterProvider(type: string): void;
    reloadProvider(type: string): void;
    addEventListener(type: string, callback: Function): void;
    removeEventListener(type: string): void;
    setDesignId(id: string | null): void;
    setDesignMode(designMode: string): void;
    setDisplayMode(displayMode: DisplayMode): void;
    loadProject(projectId: number): void;
    loadUser(user: User): void;
    loadTemplate(templateId: number): void;
    loadStockTemplate(stockTemplateId: string): void;
    setLinkTypes(linkTypes: LinkTypes): void;
    setLinkTypesSharedConfig(linkTypesSharedConfig: LinkTypesSharedConfig | null): void;
    setMergeTags(mergeTags: MergeTags): void;
    setSpecialLinks(specialLinks: SpecialLink[]): void;
    setDisplayConditions(displayConditions: DisplayConditions): void;
    setLocale(locale: Locale | null): void;
    setTextDirection(textDirection: TextDirection | null): void;
    setTranslations(translations: Translations): void;
    loadBlank(bodyValues?: object): void;
    loadDesign(design: JSONTemplate): void;
    saveDesign(callback: Function, options?: SaveDesignOptions): void;
    exportHtml(callback: (data: ExportHtmlResult) => void, options?: ExportHtmlOptions): void;
    exportLiveHtml(callback: (data: ExportLiveHtmlResult) => void, options?: ExportLiveHtmlOptions): void;
    exportPlainText(callback: (data: ExportPlainTextResult) => void, options?: ExportPlainTextOptions): void;
    exportImage(callback: (data: ExportFromApiResult) => void, options?: ExportImageFromApiOptions): void;
    exportPdf(callback: (data: ExportFromApiResult) => void, options?: ExportPdfFromApiOptions): void;
    exportZip(callback: (data: ExportFromApiResult) => void, options?: ExportZipFromApiOptions): void;
    setAppearance(appearance: DeepPartial<AppearanceConfig>): void;
    setBodyValues(bodyValues: Partial<BodyValues>, bodyId?: number): void;
    setStyleGuide(styleGuide: object): void;
    setDesignTagsConfig(designTagsConfig: DesignTagsConfig): void;
    setMergeTagsConfig(mergeTagsConfig: MergeTagsConfig): void;
    showPreview(payload: {
        device?: Device;
        resolution?: number;
    }): void;
    hidePreview(): void;
    canUndo(callback: (result: boolean) => void): void;
    canRedo(callback: (result: boolean) => void): void;
    undo(): void;
    redo(): void;
    audit(callback: (data: {
        status: 'FAIL' | 'PASS';
        errors: Audit[];
    }) => void): void;
    setValidator(validator: Validator | null): void;
    setToolValidator(tool: string, validator: Validator | null): void;
    updateTabs(tabs: Tabs): void;
    clearValidators(): void;
    registerContainerExporter(): void;
    registerItemExporter(): void;
    registerTool(): void;
    registerPropertyEditor(): void;
    registerTab(): void;
    createPanel(): void;
    createViewer(): void;
    createWidget(): void;
}
